/*
<applet code=tableBall.class width=800 height=600>
</applet>
*/
import java.awt.event.*;
import java.applet.Applet;
import java.awt.*;

public class tableBall extends Applet implements MouseListener 
{
	private int tableWidth=400;
	private int tableHeight=400;
	private int ballRadius=30;
	private int ballX=100;
	private int ballY=200;
	private int mouseX=400;
	private int mouseY=200;

	private int attenuator=1;
	private int maxStrength=100;

	private int dx=1;
	private int dy=1;
		int timer=0;


	public tableBall(){
	
	}

	public void init()
	{

		this.addMouseListener(this);
	}

	public void paint(Graphics gg){
		Graphics2D g = (Graphics2D)gg;
		//lineBresenham(300,300,0,0);
		//g.clearRect(0,0,800,600);
		drawTable(g);
		drawBall();
		ballMove(4/5);
	}

	private void drawTable(Graphics2D g)
	{
		g.setColor(Color.black);
		g.fillRect(0,0,tableWidth,tableHeight);
	}

	private void drawBall()
	{
		Graphics g=this.getGraphics();
		g.clearRect(ballX-ballRadius*2,ballY-ballRadius*2,ballRadius*2,ballRadius*2);
		g.clearRect(0,0,tableWidth,tableHeight);
		setBackground(Color.black);
		g.setColor(Color.red);
		//g.fillOval(100,100,20,20);
		g.drawOval(ballX-ballRadius,ballY-ballRadius,ballRadius,ballRadius);
		

		for(int i=-1;i<=1;i++)
		g.drawLine(ballX+i-ballRadius/2,ballY,ballX+i-ballRadius/2,ballY+ballRadius);
			int j=timer%20-10;
		g.drawLine(ballX-ballRadius/2,ballY+ballRadius/3,ballX-j*3-ballRadius/2,ballY+ballRadius);
		g.drawLine(ballX-ballRadius/2,ballY+ballRadius/3,ballX+j*3-ballRadius/2,ballY+ballRadius);
		
		g.drawLine(ballX-ballRadius/2,ballY+ballRadius,ballX-j-ballRadius/2,ballY+ballRadius*2);
		g.drawLine(ballX-ballRadius/2,ballY+ballRadius,ballX+j-ballRadius/2,ballY+ballRadius*2);

	}
	private void ballMove(float rate)
	{

		if(mouseX==ballX){
			ballMove_V(rate);
			return;
		}
		if(mouseY==ballY){
			ballMove_H(rate);
			return;
		}

		float k=(mouseY-ballY)/(mouseX-ballX);
		int dx=mouseX-ballX;
		int dy=mouseY-ballY;

		if(k>=1){
			if(dx>0)
			ballMove_1(k,1,rate);
			else
			ballMove_1(k,0,rate);

		}
		else if(k<1 && k>0)
			ballMove_2(k,rate);
		else if(k>-1 &&k<0)
			ballMove_3(k,rate);
		else
		{
			if(dx>0)
			ballMove_4(k,1,rate);
			else
			ballMove_4(k,0,rate);

		
		}
		}
	private void ballMove_V(float rate)
	{
		int timer=0;
		do{
		if(ballY+ballRadius>=tableHeight )
		{
			dy=-1;
		}
		if(ballY-ballRadius<=0){
			dy=1;
		}

		ballY=ballY+2*dy;
		drawBall();
		try{
		timer++;

		Thread.sleep(20);
		}catch(InterruptedException e){}

		}while( true );
	}

	private void ballMove_H(float rate)
	{
		do{
		if(ballX+ballRadius>=tableWidth )
		{
			dx=-1;
		}
		if(ballX-ballRadius<=0){
			dx=1;
		}
		ballX=ballX+2*dx;
		drawBall();

		try{
		Thread.sleep(30);
		timer++;
		}catch(InterruptedException e){}

		}while(true );
	}
	private void ballMove_1(float k,int type,float rate)
	{
			int y=(int)(k*(tableWidth-ballX))+ballY;
			int x;

		if(type==1){
			if(y>tableHeight){
				x=(int)((tableHeight-ballY)/k)+ballX;
				lineBresenham(ballX,ballY,x,tableHeight-10);
				ballMove_4(0-k,1,rate);	
			}
			else{
				lineBresenham(ballX,ballY,tableWidth-10,y);
				ballMove_4(0-k,0,rate);	


			}
		}
		else{
			y=(int)(k*(0-ballX))+ballY;
			if(y>0){
				x=(int)((tableHeight-ballY)/k)+ballX;
				lineBresenham(ballX,ballY,x,10);
				ballMove_4(0-k,1,rate);	
			}
			else{
				lineBresenham(ballX,ballY,10,y);
				ballMove_4(0-k,0,rate);	

			}
		}

	}

	private void ballMove_2(float k,float rate)
	{
		int timer=0;
		float Y=(float)mouseY;
		do{
		if(ballY+ballRadius>=tableHeight)
		{
			dy=-1;
			ballMove_3(0-k,(float)(rate/attenuator));
			return;
		}
		if( ballY-ballRadius<=0){
			dy=1;
			ballMove_3(0-k,(float)(rate/attenuator));
			return;
		
		}

		if(ballX-ballRadius>=tableWidth){
			dx=-1;
			ballMove_3(0-k,(float)(rate/attenuator));
			return;
				
		}

		if(ballX-ballRadius<=0){
			dx=1;
			ballMove_3(0-k,(float)(rate/attenuator));
			return;
				
		}

		ballX=ballX+dx;
		Y+=k;
		ballY=(int)(Y);
		drawBall();

		try{
		Thread.sleep(2);
		timer++;
		}catch(InterruptedException e){}

		}while(true );
	}

	private void ballMove_3(float k,float rate)
	{
		int timer=0;
		float Y=(float)mouseY;
		do{
		if(ballY+ballRadius>=tableHeight)
		{
			dy=-1;
			ballMove_2(0-k,(float)(rate/attenuator));
			return;
		}
		if(ballY-ballRadius<=0)
		{
			dy=1;
			ballMove_2(0-k,(float)(rate/attenuator));
			return;
		}

		if(ballX-ballRadius>=tableWidth ){
			dx=-1;
			ballMove_2(0-k,(float)(rate/attenuator));
			return;
				
		}
		if(ballX-ballRadius<=0){
			dx=1;
			ballMove_2(0-k,(float)(rate/attenuator));
			return;
				
		}

		ballX=ballX+dx;
		Y+=k;
		ballY=(int)(Y);
		drawBall();

		try{
		Thread.sleep(2);
		timer++;
		}catch(InterruptedException e){}

		}while( true);
	}

	private void ballMove_4(float k,int type,float rate)
	{
			int y=(int)(k*(tableWidth-ballX))+ballY;
			int x;

		if(type==0){
			if(y>0){
				x=(int)((tableHeight-ballY)/k)+ballX;
				lineBresenham(ballX,ballY,x,tableHeight);
				ballMove_1(0-k,10,rate);	
			}
			else{
				lineBresenham(ballX,ballY,10,y);
				ballMove_1(0-k,1,rate);	
			}
		}
		else{
			y=(int)(k*(0-ballX))+ballY;
			if(y<tableWidth){
				x=(int)((tableHeight-ballY)/k)+ballX;
				lineBresenham(ballX,ballY,x,10);
				ballMove_1(0-k,1,rate);	
			}
			else{
				lineBresenham(ballX,ballY,tableWidth,y);
				ballMove_1(0-k,1,rate);	

			}
		}
	}



void lineBresenham(int x0,int y0,int x1,int y1)
{
	
Graphics g=this.getGraphics();
g.setColor(Color.red);
		double k=(y1-y0)/(x1-x0);

		int flag=0;
		int ddy=y0-y1;
		if(y1<y0)
		{
			flag=1;
			y1=y0+ddy;

		}
		
		
		int dx=x1-x0;
		int dy=y1-y0;
		int d1=dy+dy;
		int d2=dy+dy-dx-dx;
		int p0=dy+dy-dx;



		int x=0;
		int y=0;

		int max=x1>x0?x1:x0;
		int min=x1<x0?x1:x0;

		while(true)
		{
			if(dx>0&&x>dx)
				break;
			if(dx<0&&x<dx)
				break;


			if(p0 < 0)
			{
				p0+=d2;
				if(dx>0)
					x++;
				else
					x--;
				if(flag==0){
					g.fillOval(x0+x-3,y0+y-3,3,3);
					ballX=x0+x;
					ballY=y0+y;
					drawBall();
					try{Thread.sleep(2);}catch(Exception e){}

				}
				else{
					g.fillOval(x0+x-3,y0-y-3,3,3);
					ballX=x0+x;
					ballY=y0-y;
					drawBall();
						try{Thread.sleep(2);}catch(Exception e){}
			
				}
			}
			else {
				p0+=d1;
				if(dx>0)
				x++;
				else
					x--;
				if(dy>0)
					y++;
				else
					y--;
				if(flag==0){
					g.fillOval(x0+x-3,y0+y-3,3,3);
					ballX=x0+x;
					ballY=y0+y;
					drawBall();
					try{Thread.sleep(2);}catch(Exception e){}
				}
				else{
					g.fillOval(x0+x-3,y0-y-3,3,3);
					ballX=x0+x;
					ballY=y0-y;
					drawBall();
					try{Thread.sleep(2);}catch(Exception e){}
				
				}

				
			}
		}
}
	/////////////mosue listener ///////
private int strength=0;
public void mouseClicked(MouseEvent e){
	
}
public void mousePressed(MouseEvent e){
//	mouseX=e.getX();
//	mouseY=e.getY();

//	strength++;
//	try{
//		Thread.sleep(30);
//	}catch(Exception ee){}
}
public void mouseReleased(MouseEvent e){
	mouseX=e.getX();
	mouseY=e.getY();

	float rate=4/5;
	ballMove(rate);
}
public void mouseEntered(MouseEvent e){
}
public void mouseExited(MouseEvent e){
}



}
